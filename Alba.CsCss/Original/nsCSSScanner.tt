<#@ template hostspecific="true" debug="true" #>
<#@ output extension="conv.cs" #>
<#@ include file="..\T4\Common.ttinclude" #>
<#
    string source = LoadText(ext: "cpp");

    Regex reSourceToken = new Regex(@"(?s)/\* Out-of-line nsCSSToken methods. \*/(.*)/\* nsCSSScanner methods. \*/");

    string sourceScanner = source.ReReplace(reSourceToken, "");
    string sourceToken = source.ReMatchGet(reSourceToken);
    string outputScanner = ConvertSource(sourceScanner);
    string outputToken = ConvertSource(sourceToken);
#>
using System;
using System.Diagnostics;
using System.Text;
using Alba.CsCss.Extensions;

using int32_t = System.Int32;
using uint8_t = System.SByte;
using uint32_t = System.Int32;
using PRUnichar = System.Char;

// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable RedundantCast
namespace Alba.CsCss {

internal partial class nsCSSToken {

<#= outputToken #>

} // class nsCSSToken

internal partial class nsCSSScanner {

<#= outputScanner #>

} // class nsCSSScanner

} // namespace Alba.CsCss
<#+
    string sArg = @"(?:[^,()]|(?<b>\()|(?<-b>\)))+(?(b)(?!))";
    string sArgs = @"(?:[^()]|(?<b>\()|(?<-b>\)))+(?(b)(?!))";

    string ConvertSource(string source) {
        return source
            // whitespace
            .ReReplace(@"\r", "")
            // preprocessor
            .ReReplace(@"#include .*", "")
            .ReReplace(@"#undef .*", "")
            .ReReplace(@"#ifdef DEBUG", "#if DEBUG")
            .ReReplace(@"using .*", "")
            // common c++ fixes
            .Replace(@"PRUnichar(')')", "((PRUnichar)(')'))")
            // common c++
            .ReReplace(@"static const", "const")
            .ReReplace(@"\) const\n", ")\n") // const functions
            .ReReplace(@"inline", "")
            .ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // casts in functional style
            .ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // cast inside cast
            // common c++ functions
            .Replace(@"std::min", "Math.Min")
            .Replace(@"std::max", "Math.Max")
            .Replace(@"pow", "Math.Pow")
            // common c++ consts
            .Replace(@"INT32_MAX", "Int32.MaxValue")
            .Replace(@"INT32_MIN", "Int32.MinValue")
            // specific c++
            .Replace(@"while (--i)", "while (--i != 0)")
            // specific mozilla
            .Replace(@"MOZ_LIKELY(ch < 0 || ch == ')')", "ch < 0 || ch == ')'")
            // common mozilla
            .ReReplace(@"(const )?nsA?String&", "StringBuilder")
            .ReReplace(@"(?s)MOZ_STATIC_ASSERT\(" + sArgs + @"\)", "")
            .ReReplace(@"(?s)MOZ_ASSERT\((" + sArgs + @")\)", "Debug.Assert($1)")
            .ReReplace(@"(?s)MOZ_(?:UN)?LIKELY\((" + sArgs + @")\)", "$1")
            .ReReplace(@"(?s)NS_ERROR\((" + sArg + @")\)", "throw new Exception($1)")
            // specific methods removal
            .ReReplace(@"(?s)nsCSSScanner::nsCSSScanner\(StringBuilder aBuffer, uint32_t aLineNumber\).*?\n}\n", "")
            .ReReplace(@"(?s)nsCSSScanner::~nsCSSScanner\(\).*?\n}\n", "")
            .ReReplace(@"(?s)void\s+nsCSSScanner::StopRecording\(StringBuilder aBuffer\).*?\n}\n", "")
            .ReReplace(@"(?s)nsDependentSubstring\s+nsCSSScanner::GetCurrentLine\(\).*?\n}\n", "")
            // specific methods signatures
            .Replace(@"Peek(uint32_t n)", "Peek(uint32_t n = 0)")
            .Replace(@"Advance(uint32_t n)", "Advance(uint32_t n = 1)")
            // specific members access
            .ReReplace(@"\n(.*)\n(nsCSSScanner|nsCSSToken)::", "\ninternal $1 ")
            .ReReplace(@"nsCSSToken&", "ref nsCSSToken")
            .ReReplace(@"(\w+)\(aToken\)", "$1(ref aToken)")
            .Replace(@"Append(&mBuffer[mOffset]", "Append(mBuffer, mOffset")
            // specific #define-style consts
            .ReReplace(@"#define +(\w+) +(\w+)\n", "const uint8_t $1 = $2;\n")
            .ReReplace(@"#define +(\w+) +([\w|]+)\n", "const uint8_t $1 = $2;\n")
            // specific enums
            .ReReplace(@"eCSSToken_(\w+)", "nsCSSTokenType.$1")
            // specific vars
            .Replace(@"const uint8_t gLexTable[] =", "static uint8_t[] gLexTable =")
            // specific expressions
            .Replace(@"AppendUCS4ToUTF16(ENSURE_VALID_CHAR(val), aOutput)", "aOutput.Append(val)")
            .Replace(@"aToken.mSymbol = Peek()", "aToken.mSymbol = (char)Peek()") // Peek returns int
            .Replace(@"aToken.mSymbol = ch", "aToken.mSymbol = (char)ch") // ch is int
            .Replace(@"aToken.mNumber = value", "aToken.mNumber = (float)value") // precision lost
            .Replace(@"((uint32_t)(ch)) < 128", "ch >= 0 && ch < 128") // uint32_t is Int32...
            // common c++
            .ReReplace(@"->", ".")
            .ReReplace(@"::", ".")
            // whitespace
            .ReReplace(@"\n\s*;\n", "\n")
            .ReReplace(@"\n{3,}", "\n\n")
            .ReReplace(@"\n", "\r\n")
            ;
    }
#>