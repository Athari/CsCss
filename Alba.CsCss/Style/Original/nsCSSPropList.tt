<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#@ include file="nsCSSPropList.ttinclude" #>
<#@ include file="nsCSSPropAliasList.ttinclude" #>
<#
    var T4 = GetT4();
    //T4.GenerateFile("nsCSSPropList.g.txt", () => GenerateCssPropListText());
    T4.GenerateFile("CssProperty.g.cs", () => GenerateCssProperty());
    T4.GenerateFile("nsCSSProps.CSSPropList.g.cs", () => GenerateCssProps());
    T4.Process();
#>

<#+
    string ConvertSource (string source)
    {
        return source
            .Replace("CSS_PROPERTY_", "")
            ;
    }
#>

<#+ void GenerateCssPropListText () { #>
//
// Generated file. Do not edit manually.
//

<#+ foreach (CssPropBase prop in GetCssPropsAll()) { #>
//
// Kind: <#=prop.GetType().Name#>
// Name: <#=prop.Name#>
// Id: <#=prop.Id #>
// MethodPublic: <#=prop.MethodPublic#>
// MethodPrivate: <#=prop.MethodPrivate#>
// Flags: <#=prop.Flags#>
// Pref: <#=prop.Pref#>
<#+ var propn = prop as CssProp; #>
<#+ if (propn != null) { #>
// ParseVariant: <#=propn.ParseVariant#>
// KwTable: <#=propn.KwTable#>
// StyleStruct: <#=propn.StyleStruct#>
// StyleStructOffset: <#=propn.StyleStructOffset#>
// AnimType: <#=propn.AnimType#>
<#+ } /* if (propn != null) */ #>
// IfDef: <#=prop.IfDef ?? "null"#>
<#+ } /* foreach (CssPropBase prop in GetCssProps()) */ #>
<#+ } /* void GenerateCssPropListText */ #>

<#+ void GenerateCssProperty () { #>
//
// Generated file. Do not edit manually.
//

using System.ComponentModel;

namespace Alba.CsCss.Style
{
    public enum CssProperty
    {
        UNKNOWN = -1,
<#+   foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
        <#=ToId(prop.Id)#>,
<#+   } #>
        COUNT_no_shorthands,
        [EditorBrowsable(EditorBrowsableState.Never)]
        COUNT_DUMMY = COUNT_no_shorthands - 1,
<#+   foreach (CssPropShort prop in GetCssPropsShort(CommonDefs)) { #>
        <#=prop.Id#>,
<#+   } #>
        COUNT,
        [EditorBrowsable(EditorBrowsableState.Never)]
        COUNT_DUMMY2 = COUNT - 1,
<#+   foreach (CssPropAlias prop in GetCssPropAliases()) { #>
        Alias_<#=prop.Method#>,
<#+   } #>
        COUNT_with_aliases,
        [EditorBrowsable(EditorBrowsableState.Never)]
        COUNT_DUMMY3 = COUNT_with_aliases - 1,
        Extra_no_properties,
        Extra_all_properties,
        Extra_x_none_value,
        Extra_x_auto_value,
    }
}
<#+ } /* void GenerateCssProperty */ #>

<#+ void GenerateCssProps () { #>
//
// Generated file. Do not edit manually.
//

using System.Collections.Generic;
using Alba.CsCss.Internal.Extensions;

using uint32_t = System.Int32;

namespace Alba.CsCss.Style
{
    internal partial class nsCSSProps
    {
        private static readonly string[] kCSSRawProperties = {
<#+       foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
            "<#=prop.Name#>",
<#+       } #>
<#+       foreach (CssPropShort prop in GetCssPropsShort(CommonDefs)) { #>
            "<#=prop.Name#>",
<#+       } #>
<#+       foreach (CssPropAlias prop in GetCssPropAliases()) { #>
            "<#=prop.Name#>",
<#+       } #>
        };

        public static readonly nsStyleStructID[] kSIDTable = {
<#+       foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
            nsStyleStructID.<#=prop.StyleStruct#>,
<#+       } #>
        };

        public static readonly uint32_t[] kFlagsTable = {
<#+       foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
            <#=ConvertSource(prop.Flags)#>,
<#+       } #>
<#+       foreach (CssPropShort prop in GetCssPropsShort(CommonDefs)) { #>
            <#=ConvertSource(prop.Flags)#>,
<#+       } #>
        };

        public static readonly int[] kParserVariantTable = {
<#+       foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
            <#=prop.ParseVariant.Replace("VARIANT_", "nsCSSParser.VARIANT_")#>,
<#+       } #>
        };

        private static readonly Dictionary<string, int> gPropertyTable = kCSSRawProperties.ToCaseInsensitiveNameTable();

        // We need static ctor, because these arrays depend on fields from other parts.
        public static readonly int[][] kKeywordTableTable;
        public static readonly CssProperty[][] kSubpropertyTable;

        static nsCSSProps ()
        {
            kKeywordTableTable = new[] {
<#+           foreach (CssProp prop in GetCssProps(CommonDefs)) { #>
                <#=prop.KwTable#>,
<#+           } #>
            };
            kSubpropertyTable = new[] {
<#+           foreach (CssPropShort prop in GetCssPropsShort(CommonDefs)) { #>
                g<#=prop.MethodPrivate#>SubpropTable,
<#+           } #>
            };
        }
    }
}
<#+ } /* void GenerateCssProps */ #>
