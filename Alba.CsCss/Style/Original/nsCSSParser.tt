<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#
    Regex reSourceParser = new Regex(@"(?s)CSSParserImpl::~CSSParserImpl.*?}\n(.*)} // anonymous namespace");

    string source = LoadText(ext: "cpp").ReReplace(@"\r", "").ReReplace(@"\\\n", "");
    string sourceParser = source.ReMatchGet(reSourceParser);

    var T4 = GetT4();
    T4.GenerateFile("nsCSSParser.conv.cs", () => GenerateCssParser(source, sourceParser));
    T4.Process();
#>
<#+
    void GenerateCssParser (string source, string sourceParser) {
#>
//
// Generated file. Do not edit manually.
//
// ReSharper disable RedundantCast
// ReSharper disable DoubleNegationOperator
// ReSharper disable NegativeEqualityExpression
// ReSharper disable ConvertIfStatementToConditionalTernaryExpression
// ReSharper disable EmptyStatement
// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable RedundantArrayCreationExpression
// ReSharper disable RedundantExplicitArrayCreation

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Alba.CsCss.Extensions;
using Alba.CsCss.Gfx;

using int32_t = System.Int32;
using uint8_t = System.SByte;
using uint16_t = System.Int16;
using uint32_t = System.Int32;
using nsresult = System.UInt32; // TODO

namespace Alba.CsCss.Style
{
    internal partial class nsCSSParser
    {
<#+   foreach (string line in ConvertVariantDefines(source)) { #>
        <#=line#>
<#+   } #>

<#=     ConvertCssParser(sourceParser).Indent(8) #>
    }
}
<#+
    } // GenerateCssParser
#>
<#+
    string ConvertCssParser (string source)
    {
        return source

            // whitespace
            .ReReplace(@"\r", "")
            .ReReplace(@"\\\n", "")
            .ReReplace(@"""\s*""", "")

            // specific mozilla
            //.Replace(@"MOZ_LIKELY(ch < 0 || ch == ')')", "ch < 0 || ch == ')'")
            // common mozilla
            .ReReplace(@"PRUnichar", "char")
            .ReReplace(@"(?s)MOZ_STATIC_ASSERT\s*\(" + sArgs + @"\)", "")
            .ReReplace(@"(?:MOZ_ASSERT|NS_ASSERTION|NS_ABORT_IF_FALSE)\((" + sArgs + @")\)",
                        "Debug.Assert($1)")
            .ReReplace(@"(?:NS_RUNTIMEABORT)\((" + sArgs + @")\)",
                        "Debug.Fail($1)")
            .ReReplace(@"NS_ENSURE_STATE\((" + sArgs + @")\)",
                        "if (!($1)) return NS_ERROR_UNEXPECTED")
            .ReReplace(@"NS_PRECONDITION\((?<Condition>"+sArg+@"), *(?<Message>"""+sArg+@""")\)",
                        "if (!(${Condition})) throw new ArgumentException(${Message})")
            .ReReplace(@"NS_ERROR\((?<Message>"""+sArg+@""")\)",
                        "throw new Exception(${Message})")
            .ReReplace(@"NS_FAILED\((?<Expr>"+sArgs+@")\)",
                        "(((${Expr}) & 0x80000000) != 0)")
            .ReReplace(@"NS_SUCCEEDED\((?<Expr>"+sArgs+@")\)",
                        "(((${Expr}) & 0x80000000) == 0)")
            .ReReplace(@"NS_RELEASE\((\*?\w+)\)", "$1 = null")
            //.ReReplace(@"(?s)MOZ_(?:UN)?LIKELY\((" + sArgs + @")\)", "$1")
            //.ReReplace(@"(?s)NS_ERROR\((" + sArg + @")\)", "throw new Exception($1)")
            .ReReplace(@"(?:NS_LITERAL_STRING|NS_ADDREF|char)\((.*?)\)", "$1")
            .ReReplace(@"(?:nsRefPtr|nsCOMPtr|nsAutoPtr|already_AddRefed)<([\w:]+)>", "$1")
            .ReReplace(@"(?:ArrayLength|NS_ARRAY_LENGTH)\(([\w:]+)\)", "$1.Length")
            .ReReplace(@"InfallibleTArray<([\w:]+)>[*&]?", "List<$1>")

            // specific preprocessor
            .ReReplace(@"REPORT_UNEXPECTED\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1""); }")
            .ReReplace(@"REPORT_UNEXPECTED_P\((\w+), ("+sArgs+@")\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", $2); }")
            .ReReplace(@"REPORT_UNEXPECTED_TOKEN\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", mToken); }")
            .ReReplace(@"REPORT_UNEXPECTED_TOKEN_CHAR\((\w+), ("+sArgs+@")\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", mToken, $2); }")
            .ReReplace(@"REPORT_UNEXPECTED_EOF\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1""); }")
            .ReReplace(@"REPORT_UNEXPECTED_EOF_CHAR\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected($1); }")
            .ReReplace(@"OUTPUT_ERROR\(\)",
                        "mReporter.OutputError()")
            .ReReplace(@"CLEAR_ERROR\(\)",
                        "mReporter.ClearError()")
            // specific methods removal
            //.ReReplace(@"(?s)nsCSSScanner::nsCSSScanner\(StringBuilder aBuffer, uint32_t aLineNumber\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsCSSScanner::~nsCSSScanner\(\).*?\n}\n", "")
            //.ReReplace(@"(?s)void\s+nsCSSScanner::StopRecording\(StringBuilder aBuffer\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsDependentSubstring\s+nsCSSScanner::GetCurrentLine\(\).*?\n}\n", "")
            // specific methods signatures
            //.Replace(@"Peek(uint32_t n)", "Peek(uint32_t n = 0)")
            //.Replace(@"Advance(uint32_t n)", "Advance(uint32_t n = 1)")
            // specific classes
            .ReReplace(@"(?n)(const )?(mozilla::)?(css::)?(CSSParserImpl::)?(?<Name>"+
                            "nsCSSValuePairList|nsCSSValueList|nsCSSRect|"+
                            "nsCSSToken|nsCSSStyleSheet|nsCSSProperty|nsMediaList|nsCSSValue|nsCSSSelectorList|nsMediaQuery|nsIPrincipal|"+
                            "ErrorReporter|Rule|StyleRule|CharsetRule|GroupRule|MediaRule|DocumentRule|ImportRule|Declaration|"+
                            "nsMediaExpression|nsMediaFeature|nsCSSSelector|nsSelectorParsingStatus"+
                       @")(?<Space> )?[*&]?", "${Name}${Space}")
            /*.ReReplace(@"(?n)(const )?(mozilla::)?(css::)?(CSSParserImpl::)?(?<Name>"+
                            "nsCSSValuePairList"+
                       @")(?<Space> )?[*&]?", "${Name}${Space}")*/
            .ReReplace(@"(?n)(?<Name>u?int\d+_t|bool|Rule|StyleRule|Declaration|nsCSSSelectorList|nsMediaQuery|nscolor)(?<Space> )?[*&]", "ref ${Name}${Space}")
            .ReReplace(@"nsIURI\*?", "Uri")
            .ReReplace(@"(const )?(nsString|nsAString|nsSubstring|nsAutoString)[*&]?", "string")
            .ReReplace(@"(?n)(const )?(char)(?<Space> ?)\*", "string${Space}")
            .Replace(@"nsCSSScanner&", "nsCSSScanner")
            .Replace(@"mozilla::css::Loader*", "CssLoader")
            .Replace(@"css::ErrorReporter&", "ErrorReporter")
            .ReReplace(@"(?n)(mozilla::)?(css::)?(?<Type>ErrorReporter|nsCSSScanner) +(?<Var>\w+)\((?<Args>"+sArgs+@")\)", "var ${Var} = new ${Type}(${Args})")
            // specific members access
            .ReReplace(@"\n(.*)\n(CSSParserImpl)::", "\ninternal $1 ")
            .ReReplace(@"&?CSSParserImpl::", "")
            .ReReplace(@"&(aScanner|aReporter|mToken|mData)", "$1")
            .ReReplace(@"\*(aResult|aChanged|aQuery|aHitStop)", "$1")
            .ReReplace(@"&(equal)", "out $1")
            // specific enums
            .ReReplace(@"e(CSSSection|CSSFontDesc|CSSProperty|CSSUnit|CSSKeyword|ParseDeclaration|SelectorParsingStatus)_(\w+)", "ns$1.$2")
            .ReReplace(@"eCSSToken_(\w+)", "nsCSSTokenType.$1")
            .ReReplace(@"ePriority_(\w+)", "PriorityParsingStatus.$1")
            .ReReplace(@"eCSSContext_(\w+)", "nsCSSContextType.$1")
            .ReReplace(@"eParseAnimationOrTransitionShorthand_(\w+)", "ParseAnimationOrTransitionShorthandResult.$1")
            .ReReplace(@"eCSSProperty(Alias|Extra)_(\w+)", "nsCSSProperty.$1_$2")
            .ReReplace(@"NS_STYLE_(\w+)", "nsStyle.$1")
            .ReReplace(@"NS_(BOXPROP_\w+)", "nsStyle.$1")
            .ReReplace(@"CSS_PROPERTY_(\w+)", "nsCSSProps.$1")
            .ReReplace(@"uint32_t parseFlags", "nsParseDeclaration parseFlags")
            // specific expressions
            .ReReplace(@"!(mScanner|mediaFeatureAtom)", "$1 == null")
            .ReReplace(@"if \((mSheet|mChildLoader|mNameSpaceMap|lastRule|declaration|query|kid)\)", "if ($1 != null)")
            .ReReplace(@"if \(!\((mSheet|aSheetPrincipal|aBaseURI|aSheetURI|aNodePrincipal|aDeclaration)\)\)", "if ($1 == null)")
            .Replace(@"(*aAppendFunc)(", "aAppendFunc(")
            //.Replace(@"static const uint8_t gLexTable[] =", "private static readonly uint8_t[] gLexTable =")
            //.Replace(@"AppendUCS4ToUTF16(ENSURE_VALID_CHAR(val), aOutput)", "aOutput.Append(val)")
            //.Replace(@"aToken.mSymbol = Peek()", "aToken.mSymbol = (char)Peek()") // Peek returns int
            //.Replace(@"aToken.mSymbol = ch", "aToken.mSymbol = (char)ch") // ch is int
            //.Replace(@"aToken.mNumber = value", "aToken.mNumber = (float)value") // precision lost
            //.Replace(@"uint32_t(ch) < 128", "ch >= 0 && ch < 128") // uint32_t is Int32...
            // specific preprocessor
            //.ReReplace(@"#define +(\w+) +(\w+)\n", "private const uint8_t $1 = $2;\n")
            //.ReReplace(@"#define +(\w+) +([\w|]+)\n", "private const uint8_t $1 = $2;\n")

            // common c++ fixes
            //.Replace(@"PRUnichar(')')", "((PRUnichar)(')'))")
            // common c++ functions
            //.Replace(@"std::min", "Math.Min")
            //.Replace(@"std::max", "Math.Max")
            //.Replace(@"pow", "Math.Pow")
            // common c++ consts
            //.Replace(@"INT32_MAX", "Int32.MaxValue")
            //.Replace(@"INT32_MIN", "Int32.MinValue")
            // common c++
            .ReReplace(@"nullptr", "null")
            .ReReplace(@"new (\w+);", "new $1();")
            .ReReplace(@"(?<Spec>const|static) (?<Type>\w+) (?<Var>\w+)\[\] = {", "${Spec} ${Type}[] ${Var} = new ${Type}[] {")
            .ReReplace(@"static const", "const")
            //.ReReplace(@"\) const\n", ")\n") // const functions
            //.ReReplace(@"inline", "")
            //.ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // casts in functional style
            //.ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // cast inside cast
            .ReReplace(@"->", ".")
            .ReReplace(@"::", ".")

            // common preprocessor
            .ReReplace(@"#(include|define|undef) .*", "")
            .ReReplace(@"#ifdef (\w+)", "#if $1")
            //.ReReplace(@"using .*", "")

            // whitespace
            .ReReplace(@"\n\s*;\n", "\n")
            .ReReplace(@"\n{3,}", "\n\n")
            .ReReplace(@"\n", "\r\n")
            .Trim()
            ;
    }

    IEnumerable<string> ConvertVariantDefines (string source)
    {
        foreach (Match m in source.ReMatches(
            @"(?imnx)^
                \#define \ +
                (?<Name>\w+) \ +                                          # constant name as-is
                (?<IntValue>\(? (-?\d+ | 0x[0-9a-f]+ | \d<<\d+) \)?) \ *? # NN or 0xHH or N<<N in optional brackets
                (?<Remainder>\ ? (//.* | /\*.*)? )$                       # one-line or block comment"))
            yield return m.Result("internal const int ${Name} = ${IntValue};${Remainder}");

        foreach (Match m in source.ReMatches(
            @"(?imnx)^
                \#define \ +
                (?<Name>\w+) \ +                                          # constant name as-is
                \(? (                                                     # aliased constant name(s)
                    (?<NamesValue>[a-z]\w+ (\ *\|\ *)? )                  # aliased constant name ending with optional | operator
                )+ \)? \ *?
                (?<Remainder>\ ? (//.* | /\*.*)? )$                       # one-line or block comment")) {
            string name = m.Get("Name"), namesValue = m.GetConcat("NamesValue"), remainder = m.Get("Remainder");
            namesValue = namesValue.ReReplace(@"^NS_STYLE_", "nsStyle.");
            yield return "internal const int {0} = {1};{2}".Fmt(name, namesValue, remainder);
        }
    }
#>