<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#
    Regex reSourceParser = new Regex(@"(?s)CSSParserImpl::~CSSParserImpl.*?}\n(.*)} // anonymous namespace");

    string source = LoadText(ext: "cpp").ReReplace(@"\r", "").ReReplace(@"\\\n", "");
    string sourceParser = source.ReMatchGet(reSourceParser);

    var T4 = GetT4();
    T4.GenerateFile("nsCSSParser.conv.cs", () => GenerateCssParser(sourceParser));
    T4.Process();
#>
<#+
    void GenerateCssParser (string source) {
#>
//
// Generated file. Do not edit manually.
//
// ReSharper disable RedundantCast
// ReSharper disable DoubleNegationOperator
// ReSharper disable NegativeEqualityExpression
// ReSharper disable ConvertIfStatementToConditionalTernaryExpression
// ReSharper disable EmptyStatement

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Alba.CsCss.Extensions;

using int32_t = System.Int32;
using uint8_t = System.SByte;
using uint32_t = System.Int32;
using PRUnichar = System.Char;
using nsresult = System.UInt32; // TODO

namespace Alba.CsCss.Style
{
    internal partial class nsCSSParser
    {
<#=     ConvertCssParser(source).Indent(8) #>
    }
}
<#+
    } // GenerateCssParser
#>
<#+
    string ConvertCssParser (string source)
    {
        return source

            // whitespace
            .ReReplace(@"\r", "")
            .ReReplace(@"\\\n", "")

            // specific mozilla
            //.Replace(@"MOZ_LIKELY(ch < 0 || ch == ')')", "ch < 0 || ch == ')'")
            // common mozilla
            //.ReReplace(@"(const )?nsA?String&", "StringBuilder")
            //.ReReplace(@"(?s)MOZ_STATIC_ASSERT\(" + sArgs + @"\)", "")
            .ReReplace(@"(?:MOZ_ASSERT|NS_ASSERTION)\((" + sArgs + @")\)", "Debug.Assert($1)")
            .ReReplace(@"NS_ENSURE_STATE\((" + sArgs + @")\)", "if (!($1)) return NS_ERROR_UNEXPECTED")
            .ReReplace(@"NS_PRECONDITION\((?<Condition>"+sArg+@"), *(?<Message>"""+sArg+@""")\)", "if (!(${Condition})) throw new ArgumentException(${Message})")
            .ReReplace(@"NS_FAILED\((?<Expr>"+sArgs+@")\)", "(((${Expr}) & 0x80000000) != 0)")
            .ReReplace(@"NS_SUCCEEDED\((?<Expr>"+sArgs+@")\)", "(((${Expr}) & 0x80000000) == 0)")
            .ReReplace(@"NS_RELEASE\((\w+)\)", "$1 = null")
            //.ReReplace(@"(?s)MOZ_(?:UN)?LIKELY\((" + sArgs + @")\)", "$1")
            //.ReReplace(@"(?s)NS_ERROR\((" + sArg + @")\)", "throw new Exception($1)")
            .ReReplace(@"(?:NS_LITERAL_STRING|NS_ADDREF|PRUnichar)\((.*?)\)", "$1")
            .ReReplace(@"(?:nsRefPtr|nsCOMPtr|nsAutoPtr|already_AddRefed)<([\w:]+)>", "$1")
            .ReReplace(@"InfallibleTArray<([\w:]+)>[*&]?", "List<$1>")

            // specific preprocessor
            .ReReplace(@"OUTPUT_ERROR\(\)", "mReporter.OutputError()")
            .ReReplace(@"CLEAR_ERROR\(\)", "mReporter.ClearError()")
            // specific methods removal
            //.ReReplace(@"(?s)nsCSSScanner::nsCSSScanner\(StringBuilder aBuffer, uint32_t aLineNumber\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsCSSScanner::~nsCSSScanner\(\).*?\n}\n", "")
            //.ReReplace(@"(?s)void\s+nsCSSScanner::StopRecording\(StringBuilder aBuffer\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsDependentSubstring\s+nsCSSScanner::GetCurrentLine\(\).*?\n}\n", "")
            // specific methods signatures
            //.Replace(@"Peek(uint32_t n)", "Peek(uint32_t n = 0)")
            //.Replace(@"Advance(uint32_t n)", "Advance(uint32_t n = 1)")
            // specific members access
            .ReReplace(@"\n(.*)\n(CSSParserImpl)::", "\ninternal $1 ")
            .ReReplace(@"&(aScanner|aReporter|mToken|mData)", "$1")
            .ReReplace(@"\*(aResult|aChanged|aQuery|aHitStop)", "$1")
            .ReReplace(@"&(equal)", "out $1")
            // specific classes
            .ReReplace(@"(?n)(const )?(mozilla::)?(css::)?(?<Name>"+
                            "nsCSSToken|nsCSSStyleSheet|nsCSSProperty|nsMediaList|nsCSSValue|nsCSSSelectorList|nsMediaQuery|nsIPrincipal|"+
                            "ErrorReporter|Rule|StyleRule|CharsetRule|GroupRule|MediaRule|DocumentRule|Declaration"+
                        ")(?<Space> )?[*&]?", "${Name}${Space}")
            .ReReplace(@"(?n)(?<Name>bool|Rule|StyleRule|Declaration|nsCSSSelectorList|nsMediaQuery)(?<Space> )?\*", "ref ${Name}${Space}")
            .Replace(@"nsIURI*", "Uri")
            .ReReplace(@"(const )?(nsString|nsAString|nsSubstring|nsAutoString)[*&]?", "string")
            .Replace(@"nsCSSScanner&", "nsCSSScanner")
            .Replace(@"mozilla::css::Loader*", "CssLoader")
            .Replace(@"css::ErrorReporter&", "ErrorReporter")
            .ReReplace(@"&?CSSParserImpl::", "")
            .ReReplace(@"(?n)(mozilla::)?(css::)?(?<Type>ErrorReporter|nsCSSScanner) +(?<Var>\w+)\((?<Args>"+sArgs+@")\)", "var ${Var} = new ${Type}(${Args})")
            // specific enums
            .ReReplace(@"eCSSToken_(\w+)", "nsCSSTokenType.$1")
            .ReReplace(@"e(CSSSection|ParseDeclaration|CSSProperty)_(\w+)", "ns$1.$2")
            .ReReplace(@"eCSSProperty(Alias)_(\w+)", "nsCSSProperty.$1_$2")
            .ReReplace(@"uint32_t parseFlags", "nsParseDeclaration parseFlags")
            // specific expressions
            .ReReplace(@"!(mScanner)", "$1 == null")
            .ReReplace(@"if \((mSheet|lastRule|declaration)\)", "if ($1 != null)")
            .ReReplace(@"if \(!\((mSheet|aSheetPrincipal|aBaseURI|aSheetURI|aNodePrincipal|aDeclaration)\)\)", "if ($1 == null)")
            //.Replace(@"static const uint8_t gLexTable[] =", "private static readonly uint8_t[] gLexTable =")
            //.Replace(@"AppendUCS4ToUTF16(ENSURE_VALID_CHAR(val), aOutput)", "aOutput.Append(val)")
            //.Replace(@"aToken.mSymbol = Peek()", "aToken.mSymbol = (char)Peek()") // Peek returns int
            //.Replace(@"aToken.mSymbol = ch", "aToken.mSymbol = (char)ch") // ch is int
            //.Replace(@"aToken.mNumber = value", "aToken.mNumber = (float)value") // precision lost
            //.Replace(@"uint32_t(ch) < 128", "ch >= 0 && ch < 128") // uint32_t is Int32...
            // specific preprocessor
            //.ReReplace(@"#define +(\w+) +(\w+)\n", "private const uint8_t $1 = $2;\n")
            //.ReReplace(@"#define +(\w+) +([\w|]+)\n", "private const uint8_t $1 = $2;\n")

            // common c++ fixes
            //.Replace(@"PRUnichar(')')", "((PRUnichar)(')'))")
            // common c++ functions
            //.Replace(@"std::min", "Math.Min")
            //.Replace(@"std::max", "Math.Max")
            //.Replace(@"pow", "Math.Pow")
            // common c++ consts
            //.Replace(@"INT32_MAX", "Int32.MaxValue")
            //.Replace(@"INT32_MIN", "Int32.MinValue")
            // common c++
            .ReReplace(@"\bnullptr\b", "null")
            .ReReplace(@"(?<Spec>const|static) (?<Type>\w+) (?<Var>\w+)\[\] = {", "${Spec} ${Type}[] ${Var} = new ${Type}[] {")
            //.ReReplace(@"static const", "private const")
            //.ReReplace(@"\) const\n", ")\n") // const functions
            //.ReReplace(@"inline", "")
            //.ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // casts in functional style
            //.ReReplace(@"(u?int\d+_t|double|PRUnichar)\((" + sArgs + @")\)", "(($1)($2))") // cast inside cast
            .ReReplace(@"->", ".")
            .ReReplace(@"::", ".")

            // common preprocessor
            .ReReplace(@"#(include|define|undef) .*", "")
            .ReReplace(@"#ifdef (\w+)", "#if $1")
            //.ReReplace(@"using .*", "")

            // whitespace
            .ReReplace(@"\n\s*;\n", "\n")
            .ReReplace(@"\n{3,}", "\n\n")
            .ReReplace(@"\n", "\r\n")
            .Trim()
            ;
    }
#>