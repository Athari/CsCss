<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#
    Regex reSourceParser = new Regex(@"(?s)CSSParserImpl::~CSSParserImpl.*?}\n(.*)} // anonymous namespace");

    string source = LoadText(ext: "cpp").ReReplace(@"\r", "").ReReplace(@"\\\n", "");
    string sourceParser = source.ReMatchGet(reSourceParser);

    var T4 = GetT4();
    T4.GenerateFile("nsCSSParser.conv.cs", () => GenerateCssParser(source, sourceParser));
    T4.Process();
#>
<#+
    void GenerateCssParser (string source, string sourceParser) {
#>
//
// Generated file. Do not edit manually.
//
// ReSharper disable RedundantCast
// ReSharper disable DoubleNegationOperator
// ReSharper disable NegativeEqualityExpression
// ReSharper disable ConvertIfStatementToConditionalTernaryExpression
// ReSharper disable EmptyStatement
// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable ConvertToConstant.Local
// ReSharper disable RedundantArrayCreationExpression
// ReSharper disable RedundantExplicitArrayCreation
// ReSharper disable RedundantAssignment

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Alba.CsCss.Extensions;
using Alba.CsCss.Gfx;

using int32_t = System.Int32;
using uint8_t = System.SByte;  // O RLY?
using uint16_t = System.Int16; // O RLY?
using uint32_t = System.Int32; // O RLY?
using size_t = System.Int32;   // O RLY?
using nsresult = System.UInt32; // TODO

namespace Alba.CsCss.Style
{
    internal partial class nsCSSParser
    {
<#+   foreach (string line in ConvertVariantDefines(source)) { #>
        <#=line#>
<#+   } #>

<#=     ConvertCssParser(sourceParser).Indent(8) #>
    }
}
<#+
    } // GenerateCssParser
#>
<#+
    string ConvertCssParser (string source)
    {
        int i = 0;
        return source

            // whitespace
            .ReReplace(@"\r", "")
            .ReReplace(@"\\\n", "")
            .ReReplace(@"""\s*\n\s*""", "")

            // specific mozilla
            //.Replace(@"MOZ_LIKELY(ch < 0 || ch == ')')", "ch < 0 || ch == ')'")
            // common mozilla
            .ReReplace(@"PRUnichar", "char")
            .ReReplace(@"(?s)MOZ_STATIC_ASSERT\s*\(" + sArgs + @"\)", "")
            .ReReplace(@"(?:MOZ_ASSERT|NS_ASSERTION|NS_ABORT_IF_FALSE)\((" + sArgs + @")\)",
                        "Debug.Assert($1)")
            .ReReplace(@"(?:NS_RUNTIMEABORT|NS_NOTREACHED)\((" + sArgs + @")\)",
                        "Debug.Fail($1)")
            .ReReplace(@"NS_ENSURE_STATE\((" + sArgs + @")\)",
                        "if (!($1)) return NS_ERROR_UNEXPECTED")
            .ReReplace(@"(?s)NS_PRECONDITION\((?<Condition>"+sArg+@"),\s*(?<Message>"""+sArg+@""")\)",
                        "if (!(${Condition})) throw new ArgumentException(${Message})")
            .ReReplace(@"NS_ERROR\((?<Message>"""+sArg+@""")\)",
                        "throw new Exception(${Message})")
            .ReReplace(@"NS_FAILED\((?<Expr>"+sArgs+@")\)",
                        "(((${Expr}) & 0x80000000) != 0)")
            .ReReplace(@"NS_SUCCEEDED\((?<Expr>"+sArgs+@")\)",
                        "(((${Expr}) & 0x80000000) == 0)")
            .ReReplace(@"NS_RELEASE\((\*?\w+)\)", "$1 = null")
            .ReReplace(@"(\w+).(?:forget|get)\(\)", "$1")
            //.ReReplace(@"(?s)MOZ_(?:UN)?LIKELY\((" + sArgs + @")\)", "$1")
            //.ReReplace(@"(?s)NS_ERROR\((" + sArg + @")\)", "throw new Exception($1)")
            .ReReplace(@"(?:NS_LITERAL_STRING|NS_ADDREF|getter_Transfers|getter_AddRefs|char)\((.*?)\)", "$1")
            .ReReplace(@"(?:nsRefPtr|nsCOMPtr|nsAutoPtr|already_AddRefed|DebugOnly)<([\w:]+)>", "$1")
            .ReReplace(@"(?:ArrayLength|NS_ARRAY_LENGTH)\(([\w:]+)\)", "$1.Length")
            .ReReplace(@"InfallibleTArray<([\w:]+)>[*&]?", "List<$1>")
            .ReReplace(@"(?n)NS_ConvertASCIItoUTF16 (?<Var>\w+)\((?<Value>"+sArgs+@")\);", "string ${Var} = ${Value};")
            .ReReplace(@"nsContentUtils::ASCIIToLower\((.*)\)", "$1 = $1.ToLower()")
            .ReReplace(@"do_GetAtom", "String.Intern")
            .ReReplace(@"NS_(RGBA?)", "nscolor.$1")
            .ReReplace(@"NS_GET_([RGBA])\((\w+)\)", "$2.$1")
            .ReReplace(@"NS_(?<Method>HexToRGB|ColorNameToRGB)\((?<Args>"+sArgs+@"), &(?<Result>\w+)\)", "nscolor.${Method}(${Args}, ref ${Result})")
            .ReReplace(@"NS_(?<Method>HSL2RGB)\((?<Args>"+sArgs+@")\)", "nscolor.${Method}(${Args})")
            .ReReplace(@"(?<Var>\w+).Rebind\(\k<Var>, (?<Value>\d+)\);", "${Var} = ${Var}.Substring(${Value});") // nsDependentString.Rebind

            // specific preprocessor
            .ReReplace(@"REPORT_UNEXPECTED\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1""); }")
            .ReReplace(@"REPORT_UNEXPECTED_P\((\w+), ("+sArgs+@")\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", $2); }")
            .ReReplace(@"REPORT_UNEXPECTED_TOKEN\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", mToken); }")
            .ReReplace(@"REPORT_UNEXPECTED_TOKEN_CHAR\((\w+), ("+sArgs+@")\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1"", mToken, $2); }")
            .ReReplace(@"REPORT_UNEXPECTED_EOF\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected(""$1""); }")
            .ReReplace(@"REPORT_UNEXPECTED_EOF_CHAR\((\w+)\)",
                       @"{ if (!mSuppressErrors) mReporter.ReportUnexpected($1); }")
            .ReReplace(@"OUTPUT_ERROR\(\)",
                        "mReporter.OutputError()")
            .ReReplace(@"CLEAR_ERROR\(\)",
                        "mReporter.ClearError()")
            .ReReplace(@"NS_FOR_CSS_SIDES ?\((?<Var>\w+)\)", "for (Side ${Var} = nsStyle.SIDE_TOP; ${Var} <= nsStyle.SIDE_LEFT; ${Var}++)")
            .ReReplace(@"{ STR_WITH_LEN\((""\w+"")\), (\w+), (\w+) }", "new UnitInfo { name = $1, unit = $2, type = $3 }")
            // specific code removal
            .ReReplace(@"(?s)struct UnitInfo {.*?\n};\n", "")
            .ReReplace(@"(?s)struct NS_STACK_CLASS ExtractFirstFamilyData {.*?\n};\n", "")
            .ReReplace(@"(?s)struct ReduceNumberCalcOps :.*?\n};\n", "")
            //.ReReplace(@"(?s)nsCSSScanner::nsCSSScanner\(StringBuilder aBuffer, uint32_t aLineNumber\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsCSSScanner::~nsCSSScanner\(\).*?\n}\n", "")
            //.ReReplace(@"(?s)void\s+nsCSSScanner::StopRecording\(StringBuilder aBuffer\).*?\n}\n", "")
            //.ReReplace(@"(?s)nsDependentSubstring\s+nsCSSScanner::GetCurrentLine\(\).*?\n}\n", "")
            // specific methods signatures
            //.Replace(@"Peek(uint32_t n)", "Peek(uint32_t n = 0)")
            //.Replace(@"Advance(uint32_t n)", "Advance(uint32_t n = 1)")

            // specific classes
            .ReReplace(@"(?n)(const )?(mozilla::)?(css::)?(CSSParserImpl::)?\b(?<Name>"+
                            "nsCSSToken|nsCSSStyleSheet|nsCSSProperty|nsMediaList|nsCSSValue|nsCSSSelectorList|nsMediaQuery|nsIPrincipal|"+
                            "ErrorReporter|Rule|StyleRule|CharsetRule|GroupRule|MediaRule|DocumentRule|ImportRule|Declaration|BackgroundParseState|"+
                            "nsMediaExpression|nsMediaFeature|nsCSSSelector|nsSelectorParsingStatus|PriorityParsingStatus|"+
                            "nsCSSValuePairList|nsCSSValueList|nsCSSRect|nsCSSFontFaceRule|NameSpaceRule|URLValue|nsCSSValueGradient|"+
                            "nsCSSValueGradientStop|nsCSSTokenType|ExtractFirstFamilyData|"+
                            "ComputeCalc"+ // static method
                       @")\b(?<Space> )?[*&]?", "${Name}${Space}")
            .Replace(@"const int32_t *&", "ref int32_t[]")
            .ReReplace(@"(?n)\b(?<Name>"+
                            "u?int\\d+_t|bool|float|Rule|StyleRule|Declaration|nsCSSSelectorList|nsMediaQuery|nsCSSValuePair|nscolor"+
                       @")\b(?<Space> )?[*&]", "ref ${Name}${Space}")
            .ReReplace(@"nsIURI\*?", "Uri")
            .ReReplace(@"(const )?\b(nsString|nsAString|nsSubstring|nsAutoString|nsDependentString|nsI?Atom)\b[*&]?", "string")
            .ReReplace(@"(?n)(const )?(char)(?<Space> ?)\*", "string${Space}")
            .Replace(@"nsCSSScanner&", "nsCSSScanner")
            .Replace(@"mozilla::css::Loader*", "CssLoader")
            .Replace(@"css::ErrorReporter&", "ErrorReporter")
            .ReReplace(@"(?n)(mozilla::)?(css::)?\b(?<Type>ErrorReporter|nsCSSScanner)\b +(?<Var>\w+)\((?<Args>"+sArgs+@")\)", "var ${Var} = new ${Type}(${Args})")
            .ReReplace(@"nsCSSValue::Array::Create\((\d+)\)", "new nsCSSValue[$1]")
            .ReReplace(@"nsCSSValue::Array", "nsCSSValue[]")
            // specific members access
            .ReReplace(@"\n(.*)\n(CSSParserImpl)::", "\ninternal $1 ")
            .ReReplace(@"&?CSSParserImpl::", "")
            .ReReplace(@"&(aScanner|aReporter|mToken|mData)", "$1")
            .ReReplace(@"\*(aResult|aChanged|aQuery|aHitStop)", "$1")
            .ReReplace(@"(tk|mToken)(\.|\->)mIdent", "$1.mIdentStr")

            // specific enums
            .ReReplace(@"e(CSSSection|CSSFontDesc|CSSProperty|CSSUnit|CSSKeyword|ParseDeclaration|SelectorParsingStatus)_(\w+)", "ns$1.$2")
            .ReReplace(@"eCSSToken_(\w+)", "nsCSSTokenType.$1")
            .ReReplace(@"ePriority_(\w+)", "PriorityParsingStatus.$1")
            .ReReplace(@"eCSSContext_(\w+)", "nsCSSContextType.$1")
            .ReReplace(@"eParseAnimationOrTransitionShorthand_(\w+)", "ParseAnimationOrTransitionShorthandResult.$1")
            .ReReplace(@"eCSSProperty(Alias|Extra)_(\w+)", "nsCSSProperty.$1_$2")
            .ReReplace(@"nsCSSPseudoClasses::ePseudoClass_(\w+)", "nsCSSPseudoClass.$1")
            .ReReplace(@"kNameSpaceID_(\w+)", "nsNameSpace.$1")
            .ReReplace(@"nsMediaExpression::e(\w+)", "nsMediaExpression.Range.$1")
            .ReReplace(@"nsMediaFeature::eMinMax(\w+)", "nsMediaFeature.RangeType.MinMax$1")
            .ReReplace(@"nsMediaFeature::e(\w+)", "nsMediaFeature.ValueType.$1")
            .ReReplace(@"NS_STYLE_(\w+)", "nsStyle.$1")
            .ReReplace(@"NS_FONT_(\w+)", "nsFont.$1")
            .ReReplace(@"NS_ATTR_FUNC_(\w+)", "nsAttrFunc.$1")
            .ReReplace(@"NS_(BOXPROP_\w+)", "nsStyle.$1")
            .ReReplace(@"CSS_PROPERTY_(\w+)", "nsCSSProps.$1")
            .ReReplace(@"\be(And|Or)\b", "SupportsConditionTermOperator.$1")
            .ReReplace(@"nsCSSPseudoClasses::Type", "nsCSSPseudoClass")
            .ReReplace(@"uint32_t parseFlags", "nsParseDeclaration parseFlags")
            .ReReplace(@"uint8_t func", "nsAttrFunc func")

            // specific expressions
            .Replace(@"(*aAppendFunc)(", "aAppendFunc(")
            .Replace(@"bool (*parseFunc)(RuleAppendFunc, void*)", "Func<RuleAppendFunc, object, bool> parseFunc")
            .Replace(@"(this->*parseFunc)", "parseFunc")
            .Replace(@"const UnitInfo", "static UnitInfo")
            .Replace(@"tmp(tk.mIdentStr, 0)", "tmp(tk.mIdentStr)")
            .ReReplace(@"mToken\.mIdentStr \+ (\d+)", "mToken.mIdentStr.Substring($1)")
            .ReReplace(@"(?<Var>\w+)\.\*\(nsCSSRect::sides\[(?<Index>\w+)\]\)", "${Var}[${Index}]")
            .ReReplace(@"(?ns)(?<Type>nsAutoParseCompoundProperty|nsAutoFailingSupportsRule|nsAutoSuppressErrors) "+ // RAII structs
                       @"(?<Var>\w+)\((?<Args>"+sArgs+@")\);(?<Code>.*?)\n}\n",
                       m => "using (/*var "+m.Get("Var")+" = */new "+m.Get("Type")+"("+m.Get("Args")+")) {"+m.Get("Code").Indent(2)+"\n  }\n}\n")
            .ReReplace(@"(?s)\n(?<Space> *)enum {(?<Code>.*?)};", menum => {
                i = 0;
                string code = menum.Get("Code"), space = menum.Get("Space");
                return code.Contains("=")
                    ? code.ReReplace(
                        @"(?n)(\s+(?<Expr>\w+\s+=\s+[\w\.]+),?(\s+//.*)?(?=\n|\s+$))+", m =>
                        "\n"+m.GetAll("Expr").Select(c => space+"const int "+c.Value+";\n").ConcatString())
                    : code.ReReplace(
                        @"(?n)(\s+(?<Const>\w+),?(\s+//.*)?(?=\n|\s+$))+", m =>
                        "\n"+m.GetAll("Const").Select(c => space+"const int "+c.Value+" = "+(i++)+";\n").ConcatString());
            })            
            // specific expressions: constructors
            .ReReplace(@"(?<Type>nsCSSFontFaceRule|nsCSSSelectorList) (?<Var>\w+)\(new \k<Type>\((?<Args>"+sArgs+@")?\)\);", "var ${Var} = new ${Type}(${Args});") // Type Var(new Type()) -> var Var = new Var(Args)
            .ReReplace(@"(?<Type>nsCSSValue|BackgroundParseState) (?<Var>\w+)\((?<Args>"+sArgs+@")\);", "var ${Var} = new ${Type}(${Args});") // Type Var(Args) -> var Var = new Var(Args)
            .ReReplace(@"(?<Type>nsCSSValue|nsCSSValueList|bool) +(?<Var>\w+)\[(?<Size>[\w\.]+)\];", "var ${Var} = new ${Type}[${Size}];") // Type Var[Size] -> var Var = new Type[Size]
            .ReReplace(@"(?<Type>Declaration|string) +(?<Var>\w+)\((?<Args>"+sArgs+@")\);", "${Type} ${Var} = ${Args};") // Type Var(Args) -> Type Var = Args
            .ReReplace(@"(?<Type>nsCSSValuePair|ReduceNumberCalcOps|List<float>|nscolor) (?<Var>\w+);", "var ${Var} = new ${Type}();") // Type Var -> var Var = new Type()
            .ReReplace(@"(?<Type>nsCSSUnit|u?int\d+_t) (?<Var>\w+);", "${Type} ${Var} = 0;") // int Var -> int Var = 0
            .ReReplace(@"bool (conditionMet|hitStop|rv|haveWS|useCommas);", "bool $1 = false;") // bool Var -> bool Var = false
            .ReReplace(@"string +\b(prefix|url|urlString)\b;", "string $1 = \"\";") // string Var -> string Var = ""
            .ReReplace(@"(?<!new )(?<Type>nsCSSValue)\(", "new ${Type}(") // Type Var[Size] -> Type(...) -> new Type(...)
            .Replace(@"nsAutoTArray<char, 16> stack;", "var stack = new List<char>(16);")
            .Replace(@"combinator = 0", @"combinator = '\0'")
            // specific expressions: boolean
            .ReReplace(@"!\b(mScanner|mSheetPrincipal|mNameSpaceMap|aResult|aTail->mNext|aTail|mediaFeatureAtom|declaration|mediaType|prefix)\b", "$1 == null")
            .ReReplace(@"!(dataMask|combinator)", "$1 == 0")
            .ReReplace(@"if \((mSheet|mChildLoader|mNameSpaceMap|lastRule|declaration|pseudoElement|query|kid)\)", "if ($1 != null)")
            .ReReplace(@"if \(!\((mSheet|aSheetPrincipal|aBaseURI|aSheetURI|aNodePrincipal|aDeclaration)\)\)", "if ($1 == null)")
            // specific expressions: declarations
            .Replace(@"static const uint8_t kVariantMaskLengths[eNumVariantMasks]", "/*TODO: static*/ uint8_t[] kVariantMaskLengths")
            .Replace(@"static const int32_t kVariantMasks[eNumVariantMasks][kMaxElemsPerFunction]", "/*TODO: static*/ int32_t[][] kVariantMasks")
            .Replace(@"{VARIANT_", "new[] {VARIANT_")
            // specific expressions: arg declarations
            .ReReplace(@"bool (aInsideBraces)", "bool $1 = false")
            .ReReplace(@"bool (aAllowExplicitCenter)", "bool $1 = true")
            .Replace(@"nsCSSContextType aContext", "nsCSSContextType aContext = nsCSSContextType.General")
            .Replace(@"uint32_t aFlags", "nsParseDeclaration aFlags")
            .ReReplace(@"\b(nsCSSProperty|nsCSSValue)\b \b(subprops|aSourceProperties|aProperties|aValues)\b(?!\[\])", "$1[] $2")
            .Replace(@"string aStopSymbolChars", "char[] aStopSymbolChars")
            .Replace(@"(string aURL)", "(ref string aURL)")
            // specific expressions: arg values
            .ReReplace(@"nsMediaQuery query;", "nsMediaQuery query = null;")
            .ReReplace(@"string condition;", "var condition = new StringBuilder();")
            // specific expressions: arg calls
            .ReReplace(@"&(equal)", "out $1")
            .ReReplace(@"&(hitStop|changed|sliceConsumedTokens|haveWS)", "ref $1")
            .ReReplace(@"(lastRule|junk|dummy)\)", "ref $1)")
            .ReReplace(@"(ParseURLOrString)\((\w+)\)", "$1(ref $2)")
            .ReReplace(@", query,", ", ref query,")
            .ReReplace(@"(?i)\((\w*conditionMet)", "(ref $1")
            .ReReplace(@"true, aChanged\)", "true, ref aChanged)")
            .ReReplace(@"(?<Method>"+
                            "ParseBoxPositionValues|ParseTransitionTimingFunctionValueComponent|ParseSelectorList|ParseSelectorGroup|"+
                            "ParseNegatedSimpleSelector|ParseHSLColor|ParseColorOpacity|ParseBackgroundRepeatValues|"+
                            "ParseBackgroundSizeValues"+
                       @")\((?<Arg1>\w+[,\)])", @"${Method}(ref ${Arg1}")
            .ReReplace(@"ParseColorComponent\((\w), (\w+)", @"ParseColorComponent(ref $1, ref $2")
            .ReReplace(@"ParseSelectorList\(\*aSelectorList, 0\)", @"ParseSelectorList(ref aSelectorList, '\0')")
            .ReReplace(@"\(AppendRuleToSheet, this", "((rule, _) => AppendRule(rule), this")
            .ReReplace(@"(?<Method>\w+)\(AssignRuleToPointer, (?<Args>[^\)]+)\);", "Rule result = null; ${Method}((rule, _) => result = rule, ${Args}); aResult = result;")

            // common c++ fixes
            //.Replace(@"PRUnichar(')')", "((PRUnichar)(')'))")
            // common c++ functions
            //.Replace(@"std::min", "Math.Min")
            //.Replace(@"std::max", "Math.Max")
            //.Replace(@"pow", "Math.Pow")
            .Replace(@"fabs", "Math.Abs")
            .Replace(@"floor", "(float)Math.Floor")
            // common c++ consts
            //.Replace(@"INT32_MAX", "Int32.MaxValue")
            //.Replace(@"INT32_MIN", "Int32.MinValue")
            // common c++
            .ReReplace(@"nullptr", "null")
            .ReReplace(@"void\*", "object")
            .ReReplace(@"new (\w+);", "new $1();")
            .ReReplace(@"(?<Spec>const|static) (?<Type>\w+) (?<Var>\w+)\[\] = {", "${Spec} ${Type}[] ${Var} = new ${Type}[] {") // create arrays
            .ReReplace(@"(?<Spec>const) (?<Type>\w+) (?<Var>\w+)\[\]", "${Type}[] ${Var}") // array args
            .ReReplace(@"(?<Type>\w+) (?<Var>a\w+)\[\]", "${Type}[] ${Var}") // array args
            .ReReplace(@"static const", "const")
            .ReReplace(@"if \((\w+) & (\w+)\)", "if (($1 & $2) != 0)")
            .ReReplace(@"// fall through(?<Space>\s+)(?<Case>default|case .*):", "goto ${Case};${Space}${Case}:")
            //.ReReplace(@"\) const\n", ")\n") // const functions
            //.ReReplace(@"inline", "")
            .ReReplace(@"(u?int\d+_t|double)\((" + sArgs + @")\)", "(($1)($2))") // casts in functional style
            //.ReReplace(@"(u?int\d+_t|double)\((" + sArgs + @")\)", "(($1)($2))") // cast inside cast
            .ReReplace(@"(?i)\b(\d)+u\b", "$1") // no suffix for ushort
            .ReReplace(@"->", ".")
            .ReReplace(@"::", ".")

            // common preprocessor
            .ReReplace(@"#(include|define|undef|pragma) .*", "")
            .ReReplace(@"#ifdef (\w+)", "#if $1")
            .ReReplace(@"\n *delete .*;\n", "\n")
            //.ReReplace(@"using .*", "")

            // whitespace
            .ReReplace(@"\n\s*;\n", "\n")
            .ReReplace(@"\n{3,}", "\n\n")
            .ReReplace(@"\n", "\r\n")
            .Trim()
            ;
    }

    IEnumerable<string> ConvertVariantDefines (string source)
    {
        foreach (Match m in source.ReMatches(
            @"(?imnx)^
                \#define \ +
                (?<Name>\w+) \ +                                          # constant name as-is
                (?<IntValue>\(? (-?\d+ | 0x[0-9a-f]+ | \d<<\d+) \)?) \ *? # NN or 0xHH or N<<N in optional brackets
                (?<Remainder>\ ? (//.* | /\*.*)? )$                       # one-line or block comment"))
            yield return m.Result("internal const int ${Name} = ${IntValue};${Remainder}");

        foreach (Match m in source.ReMatches(
            @"(?imnx)^
                \#define \ +
                (?<Name>\w+) \ +                                          # constant name as-is
                \(? (                                                     # aliased constant name(s)
                    (?<NamesValue>[a-z]\w+ (\ *\|\ *)? )                  # aliased constant name ending with optional | operator
                )+ \)? \ *?
                (?<Remainder>\ ? (//.* | /\*.*)? )$                       # one-line or block comment")) {
            string name = m.Get("Name"), namesValue = m.GetConcat("NamesValue"), remainder = m.Get("Remainder");
            namesValue = namesValue.ReReplace(@"^NS_STYLE_", "nsStyle.");
            yield return "internal const int {0} = {1};{2}".Fmt(name, namesValue, remainder);
        }
    }
#>