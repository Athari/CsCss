<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#
    string source = ConvertSource(LoadText(ext: "cpp") + LoadText(@"..\Media\Original\nsMediaFeatures.cpp"));

    var T4 = GetT4();
    T4.GenerateFile("nsCSSProps.conv.cs", () => GenerateCssProps(source));
    T4.Process();
#>

<#+ void GenerateCssProps (string source) { #>
//
// Generated file. Do not edit manually.
//

using int32_t = System.Int32;
using uint32_t = System.Int32;

namespace Alba.CsCss.Style
{
<#+ WriteTypeRenames("nsCSSProperty", "nsCSSKeyword"); #>

    internal partial class nsCSSProps
    {
<#+   foreach (string array in ConvertGlobalArrays(source)) { #>
<#=     array.Indent(8).NormalizeWhitespace() #>

<#+   } #>
    }
}
<#+ } /* void GenerateCssProps */ #>

<#+
    string ConvertSource (string source)
    {
        return source
            // specific enums
            .ReReplace(@"eCSSKeyword_(\w+)", "(int)nsCSSKeyword.$1")
            .ReReplace(@"eCSSProperty_(\w+)", "nsCSSProperty.$1")
            .ReReplace(@"NS_STYLE_(\w+)", "nsStyle.$1")
            .ReReplace(@"NS_((?:BOXPROP|COLOR)_\w+)", "nsStyle.$1")
            .ReReplace(@"NS_THEME_(\w+)", "0/*unused*/")
            .ReReplace(@"LookAndFeel::e(\w+?)_(\w+)", "(int)LookAndFeel.$1.$2")

            // common preprocessor
            .ReReplace(@"#ifdef (\w+)", "#if $1")
            ;
    }

    IEnumerable<string> ConvertGlobalArrays (string source)
    {
        foreach (Match m in source.ReMatches(@"(?ns)(static )?(const )?(?<Type>u?int\d+_t|nsCSSProperty) (nsCSSProps::)?(?<Var>\w+)\[\] = {(?<Code>.*?)};"))
            yield return "public static readonly {0}[] {1} = {{{2}}};"
                .Fmt(m.Get("Type"), m.Get("Var"), Refactor(m.Get("Code")));
    }
#>