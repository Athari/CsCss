<#@ template hostspecific="true" debug="true" #>
<#@ output extension="/" #>
<#@ include file="..\..\T4\Common.ttinclude" #>
<#@ include file="nsCSSPseudoElementList.ttinclude" #>
<#
    var T4 = GetT4();
    //T4.GenerateFile("nsCSSPseudoElementList.g.txt", () => GenerateCssPseudoElementListText());
    T4.GenerateFile("CssPseudoElement.g.cs", () => GenerateCssPseudoElement());
    T4.GenerateFile("nsCSSPseudoElements.g.cs", () => GenerateCssPseudoElements());
    T4.Process();
#>

<#+ void GenerateCssPseudoElementListText () { #>
//
// Generated file. Do not edit manually.
//

<#+ foreach (CssPseudoElement el in GetCssPseudoElements()) { #>
//
// Name: <#=el.Name#>
// Value: <#=el.Value#>
// Flags: <#=el.Flags#>
<#+ } #>
<#+ } /* void GenerateCssPseudoElementListText */ #>

<#+ void GenerateCssPseudoElement () { #>
//
// Generated file. Do not edit manually.
//

using System.ComponentModel;

namespace Alba.CsCss.Style
{
    public enum CssPseudoElement
    {
<#+   foreach (string elName in GetCssPseudoElements().Select(el => ToPascalId(el.Name))) { #>
<#+    if (elName.StartsWith("Moz")) { #>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
<#+    } #>
        <#=elName#>,
<#+   } #>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        PseudoElementCount,
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        AnonBox = PseudoElementCount,
#if MOZ_XUL
        XULTree,
#endif
        [EditorBrowsable(EditorBrowsableState.Never)]
        NotPseudoElement,
        [EditorBrowsable(EditorBrowsableState.Never)]
        MAX,
    }
}
<#+ } /* void GenerateCssPseudoElement */ #>

<#+ void GenerateCssPseudoElements () { #>
//
// Generated file. Do not edit manually.
//

using System.Collections.Generic;
using Alba.CsCss.Internal;

namespace Alba.CsCss.Style
{
    internal static partial class nsCSSPseudoElements
    {
<#+   foreach (CssPseudoElement cls in GetCssPseudoElements()) { #>
        public static string <#=ToId(cls.Name)#> = <#=cls.Value#>;
<#+   } #>

        private static readonly IDictionary<string, CssPseudoElement> sPseudoElements =
            new Dictionary<string, CssPseudoElement>(ReferenceEqualityComparer<object>.Default) {
<#+           foreach (CssPseudoElement cls in GetCssPseudoElements()) { #>
                { <#=cls.Value#>, CssPseudoElement.<#=ToPascalId(cls.Name)#> },
<#+           } #>
            };
    }
}
<#+ } /* void GenerateCssPseudoElement */ #>
