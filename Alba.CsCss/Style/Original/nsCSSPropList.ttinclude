<#+
    IList<CssPropBase> _cssProps;

    void LoadCssProps () {
        Regex reSourceMain = new Regex(@"(?s)#endif /\* !defined\(CSS_PROP\) \*/(.*)#ifdef USED_CSS_PROP");

        string source = LoadText("nsCSSPropList.h");
        string sourceMain = source.ReMatchGet(reSourceMain);
        string outputMain = ConvertCssPropsSource(sourceMain);

        _cssProps = GetCssPropsFromSource(outputMain).ToList();
    }

    string ConvertCssPropsSource (string source) {

        string[] CssPropDefineShortcuts = new string [] {
            "Font", "Color", "Background", "List", "Position", "Text", "TextReset", "Display", "Visibility", "Content", "Quotes",
            "UserInterface", "UIReset", "Table", "TableBorder", "Margin", "Padding", "Border", "Outline", "XUL", "Column", "SVG", "SVGReset"
        };

        source = source

            // whitespace
            .ReReplace(@"\r", "")

            // comments remove
            .ReReplace(@"\n? *//.*", "")
            .ReReplace(@" */\*.*\*/", "")

            // specific preprocessor
            .ReReplace(
                @"CSS_PROP_BACKENDONLY\($,$,$,$,$,$,$\)".Replace(",", ", *\n").Replace("$", "(" + sArgs + ")"),
                 "CSS_PROP($1,\n$2,\n$3,\n$4,\n$5,\n$6,\n$7,\n BackendOnly,\n CSS_PROP_NO_OFFSET,\n eStyleAnimType_None)")                    
            .ReReplace(@"CSS_PROP_DOMPROP_PREFIXED\((\w+)\)", "CSS_PROP_PUBLIC_OR_PRIVATE(Moz$1,$1)")
            .ReReplace(@"CSS_PROP_PUBLIC_OR_PRIVATE\((\w+), *(\w+)\)", "$1|$2")
            .ReReplace(@"offsetof\((\w+), *(\w+)\)", "$1.$2")

            // common preprocessor
            .ReReplace(@"#include .*", "")
            .ReReplace(@"#undef .*", "")
            .ReReplace(@"#ifdef (\w+)", "#if $1")
            .ReReplace(@"#ifndef (\w+)", "#if !$1")
            .ReReplace(@"using .*", "")

            // whitespace
            .ReReplace(@"\n\s*;\n", "\n")
            .ReReplace(@"\n{3,}", "\n\n")
            .Trim()
            ;

        foreach (var shortcut in CssPropDefineShortcuts)
            source = source.ReReplace(
                @"CSS_PROP_#NAME#\($,$,$,$,$,$,$,$,$\)"
                    .Replace("#NAME#", shortcut.ToUpper())
                    .Replace(",", ", *\n")
                    .Replace("$", "(" + sArgs + ")"),
                "CSS_PROP($1,\n$2,\n$3,\n$4,\n$5,\n$6,\n$7,\n    #NAME#,\n$8,\n$9)"
                    .Replace("#NAME#", shortcut));

        return source;
    }

    IEnumerable<CssPropBase> GetCssPropsFromSource (string source) {

        foreach (Match m in source.ReMatches(
                @"(?x)(
                    (?<Kind>CSS_PROP)\(
                        (?<Name>$), (?<Id>$), (?<Method>$), (?<Flags>$), (?<Pref>$), (?<ParseVariant>$), (?<KwTable>$),
                        (?<StyleStruct>$), (?<StyleStructOffset>$), (?<AnimType>$)
                    \)
                    |
                    (?<Kind>CSS_PROP_SHORTHAND)\(
                        (?<Name>$), (?<Id>$), (?<Method>$), (?<Flags>$), (?<Pref>$)
                    \)
                )".Replace(",", @",\ *\n").Replace("$", sArgs))) {
            CssPropBase prop;
            if (m.Get("Kind") == "CSS_PROP") {
                var propn = new CssProp {
                    ParseVariant = m.Get("ParseVariant").Trim(),
                    KwTable = m.Get("KwTable").Trim(),
                    StyleStruct = m.Get("StyleStruct").Trim(),
                    StyleStructOffset = m.Get("StyleStructOffset").Trim(),
                    AnimType = m.Get("AnimType").Replace("eStyleAnimType_", "").Trim(),
                };
                if (propn.KwTable == "nullptr")
                    propn.KwTable = "null";
                if (propn.StyleStructOffset == "CSS_PROP_NO_OFFSET")
                    propn.StyleStructOffset = "null";
                prop = propn;
            }
            else {
                prop = new CssPropShort();
            }

            prop.Name = m.Get("Name").Trim();
            prop.Id = m.Get("Id").Trim();
            prop.MethodPublic = m.Get("Method").Trim();
            prop.Flags = m.Get("Flags").ReReplace(@"\s+", " ").Trim();
            prop.Pref = m.Get("Pref").Trim();

            if (prop.MethodPublic.Contains("|")) {
                string[] methods = prop.MethodPublic.Split('|');
                prop.MethodPublic = methods[0];
                prop.MethodPrivate = methods[1];
            }
            else
                prop.MethodPrivate = prop.MethodPublic;
            int posMacro = source.LastIndexOf('#', m.Index);
            if (posMacro != -1) {
                string macro = source.Substring(posMacro, source.IndexOf('\n', posMacro) - posMacro);
                if (macro.StartsWith("#if "))
                    prop.IfDef = macro.Substring(4);
            }
            yield return prop;
        }
        //WriteLine(source);
    }

    IEnumerable<CssPropBase> GetCssPropsAll (IEnumerable<string> defs = null) {
        if (_cssProps == null)
            LoadCssProps();
        defs = defs != null ? defs.ToArray() : new string[0];
        return _cssProps.Where(p => {
            if (p.IfDef == null)
                return true;
            bool isNegative = p.IfDef.StartsWith("!");
            string ifDef = isNegative ? p.IfDef.Substring(1) : p.IfDef;
            return isNegative ^ defs.Contains(ifDef);
        });
    }

    IEnumerable<CssProp> GetCssProps (IEnumerable<string> defs = null) {
        return GetCssPropsAll(defs).OfType<CssProp>();
    }

    IEnumerable<CssPropShort> GetCssPropsShort (IEnumerable<string> defs = null) {
        return GetCssPropsAll(defs).OfType<CssPropShort>();
    }

    class CssPropBase
    {
        public string Name, Id, MethodPublic, MethodPrivate, Flags, Pref, IfDef;

        public string UnprefixedName { get { return IsExtension ? Name.Substring(Name.IndexOf('-', 1) + 1) : Name; } }
        public bool IsExtension { get { return Name.StartsWith("-"); } }
        public bool HasFlag (string flag) { return Flags.IsReMatch(@"\b(?:CSS_PROPERTY_)?" + flag.ReEscape() + @"\b"); }
    }

    class CssProp : CssPropBase
    {
        public string ParseVariant, KwTable, StyleStruct, StyleStructOffset, AnimType;
    }

    class CssPropShort : CssPropBase { }
#>