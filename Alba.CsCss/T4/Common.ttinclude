<#@   assembly name="$(SolutionDir)\bin\Debug\Alba.Framework.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="Alba.Framework.Text"
#><#@ import namespace="Alba.Framework.Collections"
#><#@ include file="$(SolutionDir)\Alba.Framework\Alba.Framework.CodeGeneration\T4\Common.ttinclude"
#><#+
    string sArg = @"(?:[^,()]|(?<b>\()|(?<-b>\)))+(?(b)(?!))";
    string sArgs = @"(?:[^()]|(?<b>\()|(?<-b>\)))+(?(b)(?!))";
    string[] CommonDefs = { "MOZ_FLEXBOX" };
    ISet<string> CSharpKeywords = new[] {
        "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const",
        "continue", "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern", "false",
        "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface",
        "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "override",
        "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof", "stackalloc",
        "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked",
        "unsafe", "ushort", "using", "virtual", "void", "volatile", "while",
    }.ToSet();

    string ToId (string name) {
        return CSharpKeywords.Contains(name) ? "@" + name : name;
    }
#>